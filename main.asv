% You should change the current folder to the folder-
% where the project file is located so that you don't get the error.
clc
clear
close all


%%%%%%%%%%%%%%%%%%%%%
%% in this part, we load the sound file
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
[y , fs] = audioread('testmusic.wav');
load("filters.mat")

player = audioplayer(y , fs);

%play the sound
play(player)

%%%%%%%%%%%%
%define matrix A
A           = [ 0   0   1   0   0 ; ...
                0   0   0   0   1 ; ...
                0   0   0   1   0 ; ...
               .05  0   0   0   0 ; ...
                0   1   0   0   0];

%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% You have to fill in this part    |   |          %
%                                  |   |          %
%                                 \     /         %
%                                  \   /          %
%                                   \ /           %
%                                    .            %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% computing the inverse matrix
% you should descramble band acording to inverse matrix
%%%%%%%%%%%%%%%%%%%%%%%%%
Ainv = zeros(size(A));
Ainv = inv(A);
disp(Ainv)
%% spectrum of sound
%%%%%%%%%%%%%%%%%%%%%%%%%
% use FFT function defined in example
figure;
Y = fftshift(fft(y));
N = numel(y);
freq = (-N / 2 : N / 2 - 1) / N * fs;
plot(freq, (abs(Y)) , 'LineWidth' , 1) ;
grid on
title('frequency spectrum of encoded signal');
ylabel('AMP');
xlabel('Freq(Hz)');
xlim ([-fs / 2, fs / 2]);
%% decomposing the input into 5 bands
%%%%%%%%%%%%%%%%%%%%%%%%%
y1 = filter(Band1, y);
y2 = filter(Band2, y);
y3 = filter(Band3, y);
y4 = filter(Band4, y);
y5 = filter(Band5, y);
t = linspace(0, 28, fs * 28);
%% Band1
% calculate frequency of shifting
f14 = abs(4 - 1) * fs / 10;
% shift using multipling by cosine function
shift1 = cos(2 * pi * f14 * t);
x1 = 40 * y4 .* shift1';
x1 = filter(Band1,x1);

% filter result for deleting redundant bands generated by delta function
figure;
X1 = fftshift(fft(x1));
N = numel(x1);
freq = (-N / 2 : N / 2 - 1) / N * fs;
plot(freq, (abs(X1)) , 'LineWidth' , 1);
hold on
plot(freq, abs(fftshift(fft(y4))), 'LineWidth', 1);
grid on
title('absolute value of fourier transform of x1 and y4');
ylabel('AMP');
xlabel('Freq(Hz)');
xlim ([-fs / 2, fs / 2]);
legend('fourier transform of x1', 'fourier transform of y4');
%% Band2
% calculate frequency of shifting
f25 = abs(5 - 2) * fs / 10;
% shift using multipling by cosine function
shift2 = cos(2 * pi * f25 * t);
x2 = 2 * y5 .* shift2';
% filter result for deleting redundant bands generated by delta function
x2 = filter(Band2,x2);

% plot fourier transform of band and shifted band
figure;
X2 = fftshift(fft(x2));
N = numel(x1);
freq = (-N / 2 : N / 2 - 1) / N * fs;
plot(freq, (abs(X2)) , 'LineWidth' , 1);
hold on
plot(freq, abs(fftshift(fft(y5))), 'LineWidth', 1);
grid on
title('absolute value of fourier transform of x2 and y5');
ylabel('AMP');
xlabel('Freq(Hz)');
xlim ([-fs / 2, fs / 2]);
legend('fourier transform of x2', 'fourier transform of y5');
%% Band3
% calculate frequency of shifting
f31 = abs(1 - 3) * fs / 10;
% shift using multipling by cosine function
shift3 = cos(2 * pi * f31 * t);
x3 = 2 * y1 .* shift3';
% filter the result for deleting redundant bands generated by delta function
x3 = filter(Band3,x3);

% plot fourier transform of band and shifted band
figure;
X3 = fftshift(fft(x3));
N = numel(x3);
freq = (-N / 2 : N / 2 - 1) / N * fs;
plot(freq, (abs(X3)) , 'LineWidth' , 1);
hold on
plot(freq, abs(fftshift(fft(y1))), 'LineWidth', 1);
grid on
title('absolute value of fourier transform of x3 and y1');
ylabel('AMP');
xlabel('Freq(Hz)');
xlim ([-fs / 2, fs / 2]);
legend('fourier transform of x3', 'fourier transform of y1');
%% Band4
% calculate frequency of shifting
f43 = abs(3 - 4) * fs / 10;
% shift using multipling by cosine function
shift4 = cos(2 * pi * f43 * t);
x4 = 2 * y3 .* shift4';
% filter the result for deleting redundant bands generated by delta function
x4 = filter(Band4,x4);

% plot fourier transform of band and shifted band
figure;
X4 = fftshift(fft(x4));
N = numel(x4);
freq = (-N / 2 : N / 2 - 1) / N * fs;
plot(freq, (abs(X4)) , 'LineWidth' , 1);
hold on
plot(freq, abs(fftshift(fft(y3))), 'LineWidth', 1);
grid on
title('absolute value of fourier transform of x4 and y3');
ylabel('AMP');
xlabel('Freq(Hz)');
xlim ([-fs / 2, fs / 2]);
legend('fourier transform of x4', 'fourier transform of y3');
%% Band5
% calculate frequency of shifting
f52 = abs(2 - 5) * fs / 10;
% shift using multipling by cosine function
shift5 = cos(2 * pi * f52 * t);
x5 = 2 * y2 .* shift5';
% filter the result for deleting redundant bands generated by delta function
x5 = filter(Band5,x5);

% plot fourier transform of band and shifted band
figure;
X5 = fftshift(fft(x5));
N = numel(x5);
freq = (-N / 2 : N / 2 - 1) / N * fs;
plot(freq, (abs(X5)) , 'LineWidth' , 1);
hold on
plot(freq, abs(fftshift(fft(y2))), 'LineWidth', 1);
grid on
title('absolute value of fourier transform of x5 and y2');
ylabel('AMP');
xlabel('Freq(Hz)');
xlim ([-fs / 2, fs / 2]);
legend('fourier transform of x5', 'fourier transform of y2');
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                    .            %
%                                   / \           %
%                                  /   \          %
%                                 /     \         %
%                                  |   |          %
%                                  |   |          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%
% check whether the decompositon is ok
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
x = x1 + x2 + x3 + x4 + x5;

% plot frequency spectrum of output signal
figure;
X = fftshift(fft(x));
N = numel(x);
freq = (-N / 2 : N / 2 - 1) / N * fs;
plot(freq, (abs(X)) , 'LineWidth' , 1);
title('absolute value of fourier transform of x');
ylabel('AMP');
xlabel('Freq(Hz)');
xlim ([-fs / 2, fs / 2]);


player = audioplayer(x , fs);
play(player)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%save vector x as a sound in the curent folder
audiowrite('output.wav' , x , fs)
%% Using fft and ifft for descrambling
% initializing final bands fourier transform
X1 = zeros(length(y), 1);
X2 = zeros(length(y), 1);
X3 = zeros(length(y), 1);
X4 = zeros(length(y), 1);
X5 = zeros(length(y), 1);

% assigning proper values to X_is
len = length(y);

Y = fftshift(fft(y));
% first band
X1(4 * len / 10 + 1 : 5 * len / 10, 1) = 20 * Y(1 * len / 10 + 1 : 2 * len / 10, 1);
X1(5 * len / 10 + 1 : 6 * len / 10, 1) = 20 * Y(8 * len / 10 + 1 : 9 * len / 10, 1);

% second band
X2(3 * len / 10 + 1 : 4 * len / 10, 1) = Y(0 * len / 10 + 1 : 1 * len / 10, 1);
X2(6 * len / 10 + 1 : 7 * len / 10, 1) = Y(9 * len / 10 + 1 : 10 * len / 10, 1);

% third band
X3(2 * len / 10 + 1 : 3 * len / 10, 1) = Y(4 * len / 10 + 1 : 5 * len / 10, 1);
X3(7 * len / 10 + 1 : 8 * len / 10, 1) = Y(5 * len / 10 + 1 : 6 * len / 10, 1);

% fourth band
X4(1 * len / 10 + 1 : 2 * len / 10, 1) = Y(2 * len / 10 + 1 : 3 * len / 10, 1);
X4(8 * len / 10 + 1 : 9 * len / 10, 1) = Y(7 * len / 10 + 1 : 8 * len / 10, 1);

% fifth band
X5(0 * len / 10 + 1 : 1 * len / 10, 1) = Y(3 * len / 10 + 1 : 4 * len / 10, 1);
X5(9 * len / 10 + 1 : 10 * len / 10, 1) = Y(6 * len / 10 + 1 : 7 * len / 10, 1);

X = X1 + X2 + X3 + X4 + X5;
figure;
N = numel(X);
freq = (-N / 2 : N / 2 - 1) / N * fs;
plot(freq, abs((X)) , 'LineWidth' , 1);
title('absolute value of fourier transform of x using fft of signal');
ylabel('AMP');
xlabel('Freq(Hz)');
xlim ([-fs / 2, fs / 2]);

% fft inverse and correction on symmetric of signal
x = fftshift(ifft(fftshift(X)));
output = zeros(length(x), 1);
output(1 : length(x) / 2, 1) = x(length(x) / 2 + 1 : length(x), 1);
output(length(x) / 2 + 1 : length(x), 1) = x(1 : length(x) / 2, 1);
player = audioplayer(real(output) , fs);
play(player)

%save the output
audiowrite('decodingusingfft.wav' , real(output), fs);
%% Record my audio and save it
% recObj = audiorecorder(44100, 16, 1);
% recDuration = 30;
% recordblocking(recObj,recDuration);
% myrec= getaudiodata(recObj);
% audiowrite('myVoiceOrg.wav', myrec, 44100);
%% Play my recorded voice
[g , fs] = audioread('myVoiceOrg.wav');

player = audioplayer(g , fs);
disp(size(g))
%play the sound
play(player)
%% Encoding with the algorithm that defines in problem
% seperating each band of original voice 
g1 = filter(Band1, g);
g2 = filter(Band2, g);
g3 = filter(Band3, g);
g4 = filter(Band4, g);
g5 = filter(Band5, g);
t = linspace(0, 30, fs * 30);

% encoding the voice
shift1 = cos(2 * pi * f31 * t);
encoded1 = 2 * g3 .* shift1';
encoded1 = filter(Band1, encoded1);

shift2 = cos(2 * pi * f52 * t);
encoded2 = 2 * g5 .* shift2';
encoded2 = filter(Band2, encoded2);

shift3 = cos(2 * pi * f43 * t);
encoded3 = 2 * g4 .* shift3';
encoded3 = filter(Band3, encoded3);

shift4 = cos(2 * pi * f14 * t);
encoded4 = 2 * (1 / 20) * g1 .* shift4';
encoded4 = filter(Band4, encoded4);

shift5 = cos(2 * pi * f25 * t);
encoded5 = 2 * g2 .* shift5';
encoded5 = filter(Band5, encoded5);

encoded = encoded1 + encoded2 + encoded3 + encoded4 + encoded5;
% saving as encoded voice
audiowrite('encodedVoice.wav' , encoded , fs);
%% decoding like previous part
[a , fs] = audioread('encodedVoice.wav');

player = audioplayer(a , fs);

%play my encoded voice
play(player)

a1 = filter(Band1, a);
a2 = filter(Band2, a);
a3 = filter(Band3, a);
a4 = filter(Band4, a);
a5 = filter(Band5, a);
t = linspace(0, 30, fs * 30);
% Band1
% calculate frequency of shifting
f14 = abs(4 - 1) * fs / 10;
% shift using multipling by cosine function
shift1 = cos(2 * pi * f14 * t);
b1 = 40 * a4 .* shift1';
b1 = filter(Band1,b1);

% Band2
% calculate frequency of shifting
f25 = abs(5 - 2) * fs / 10;
% shift using multipling by cosine function
shift2 = cos(2 * pi * f25 * t);
b2 = 2 * a5 .* shift2';
% filter result for deleting redundant bands generated by delta function
b2 = filter(Band2,b2);

% Band3
% calculate frequency of shifting
f31 = abs(1 - 3) * fs / 10;
% shift using multipling by cosine function
shift3 = cos(2 * pi * f31 * t);
b3 = 2 * a1 .* shift3';
% filter the result for deleting redundant bands generated by delta function
b3 = filter(Band3,b3);

% Band4
% calculate frequency of shifting
f43 = abs(3 - 4) * fs / 10;
% shift using multipling by cosine function
shift4 = cos(2 * pi * f43 * t);
b4 = 2 * a3 .* shift4';
% filter the result for deleting redundant bands generated by delta function
b4 = filter(Band4,b4);

% Band5
% calculate frequency of shifting
f52 = abs(2 - 5) * fs / 10;
% shift using multipling by cosine function
shift5 = cos(2 * pi * f52 * t);
b5 = 2 * a2 .* shift5';
% filter the result for deleting redundant bands generated by delta function
b5 = filter(Band5,b5);

b = b1 + b2 + b3 + b4 + b5;


player = audioplayer(b , fs);
play(player)
audiowrite('myDecodedVoice.wav' , b , fs);